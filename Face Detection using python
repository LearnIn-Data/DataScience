To detect faces using Python, we can use the popular `OpenCV` library, which has pre-trained models for face detection. These models are based on the Haar Cascade classifier, which is effective for detecting objects in images.

Here's a simple Python script to detect faces in an image:

### Step-by-Step Guide:

1. Install the necessary libraries.
    ```bash
    pip install opencv-python
    ```

2. Download the Haar Cascade classifier for face detection from OpenCV's GitHub repository. You can get the pre-trained model from [here](https://github.com/opencv/opencv/tree/master/data/haarcascades). Specifically, you'll want the `haarcascade_frontalface_default.xml` file.

3. Use the following Python script:

### Python Script: Face Detection Using OpenCV

```python
import cv2

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load an image (you can also use live video feed via webcam)
image_path = 'path_to_your_image.jpg'  # Replace with the actual path of your image
image = cv2.imread(image_path)

# Convert image to grayscale for better performance with the classifier
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Detect faces in the image
faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

# Draw rectangles around detected faces
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)

# Show the output image with detected faces
cv2.imshow('Detected Faces', image)

# Wait until any key is pressed
cv2.waitKey(0)

# Close all windows
cv2.destroyAllWindows()
```

### Explanation:

- **cv2.CascadeClassifier**: Loads the pre-trained model (`haarcascade_frontalface_default.xml`) to detect faces.
- **detectMultiScale**: Detects objects of different sizes (in this case, faces) in the input image. It returns the coordinates of the rectangles around the detected faces.
    - `scaleFactor`: How much the image size is reduced at each image scale. A smaller factor detects smaller faces but takes more computation.
    - `minNeighbors`: Specifies how many neighbors each candidate rectangle should have to retain it. Higher values reduce false positives.
    - `minSize`: Specifies the minimum size of the detected face.
- **cv2.rectangle**: Draws rectangles around the detected faces.
- **cv2.imshow**: Displays the image with rectangles marking the faces.

### Notes:
- You can also use a live video stream (webcam) by replacing the image reading section with:
    ```python
    cap = cv2.VideoCapture(0)  # 0 is the default camera index
    while True:
        ret, frame = cap.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        
        cv2.imshow('Face Detection', frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to quit
            break
    
    cap.release()
    cv2.destroyAllWindows()
    ```

This script is a basic yet powerful way to detect faces using OpenCV and Python. You can extend it by integrating more advanced models like deep learning-based face detection for higher accuracy.
